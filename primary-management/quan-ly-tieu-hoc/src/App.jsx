import React, { useState, useMemo, useEffect, useRef, createContext, useContext } from 'react';
import { User, BookUser, Banknote, LayoutDashboard, Plus, X, Edit, Trash2, Search, AlertCircle, LogOut, Users, ShieldCheck, CreditCard, Landmark, Home, UserCheck, Library, Briefcase, Calendar, Star, Users2, ChevronDown, Moon, Sun, Award, Smile, Meh, Frown } from 'lucide-react';

// === Dữ liệu khởi tạo (Trong ứng dụng thực tế sẽ là CSDL) ===
// --- Dữ liệu đã được cập nhật cho phù hợp với trường Tiểu học ---
const initialTeachers = [
    { id: 1, name: 'Nguyễn Thị Lan', gender: 'Nữ', dob: '1990-10-20', phone: '0912345678', departmentId: 1, role: 'department_head' },
    { id: 2, name: 'Lê Văn Hùng', gender: 'Nam', dob: '1988-05-15', phone: '0987654321', departmentId: 2, role: 'teacher' },
    { id: 3, name: 'Trần Minh Anh', gender: 'Nữ', dob: '1992-01-01', phone: '0905556677', departmentId: 3, role: 'teacher' },
    { id: 4, name: 'Phạm Thị Bích', gender: 'Nữ', dob: '1985-03-12', phone: '0905112233', departmentId: 4, role: 'general_in_charge' },
    { id: 5, name: 'Hoàng Văn Dũng', gender: 'Nam', dob: '1982-07-25', phone: '0988776655', departmentId: 1, role: 'teacher' },
];
const initialDepartments = [
    { id: 1, name: 'Tổ 1' },
    { id: 2, name: 'Tổ 2, 3' },
    { id: 3, name: 'Tổ 4, 5' },
    { id: 4, name: 'Tổ Năng khiếu & Phụ trách' }
];
const initialSubjects = [
    { id: 1, name: 'Tiếng Việt', type: 'score' },
    { id: 2, name: 'Toán', type: 'score' },
    { id: 3, name: 'Đạo đức', type: 'assessment' },
    { id: 4, name: 'Tự nhiên và Xã hội', type: 'assessment' },
    { id: 5, name: 'Âm nhạc', type: 'assessment' },
    { id: 6, name: 'Mỹ thuật', type: 'assessment' },
    { id: 7, name: 'Thể dục', type: 'assessment' },
    { id: 8, name: 'Ngoại ngữ', type: 'score' },
];
const initialClasses = [
    { id: 1, name: 'Lớp 1A', homeroomTeacherId: 1 },
    { id: 2, name: 'Lớp 2B', homeroomTeacherId: 2 },
    { id: 3, name: 'Lớp 4C', homeroomTeacherId: 3 },
];
const initialStudents = [
    { id: 1, name: 'Nguyễn Trần Gia Bảo', gender: 'Nam', dob: '2018-05-15', classId: 1, address: '123 Đường ABC, Quận 1', parentName: 'Nguyễn Văn Ba', parentPhone: '0901234567' },
    { id: 2, name: 'Lê Ngọc Khánh An', gender: 'Nữ', dob: '2018-09-22', classId: 1, address: '456 Đường XYZ, Quận 3', parentName: 'Lê Thị Diệu', parentPhone: '0912345678' },
    { id: 3, name: 'Phạm Hoàng Minh', gender: 'Nam', dob: '2017-02-10', classId: 2, address: '789 Đường LMN, Quận 10', parentName: 'Phạm Văn Cường', parentPhone: '0987654321' },
];
const initialGrades = [
    { id: 1, studentId: 1, subjectId: 1, midterm: 9, final: 10, assessment: 'Hoàn thành tốt' },
    { id: 2, studentId: 1, subjectId: 2, midterm: 8, final: 9, assessment: 'Hoàn thành tốt' },
    { id: 3, studentId: 1, subjectId: 3, assessment: 'Hoàn thành' },
    { id: 4, studentId: 2, subjectId: 1, midterm: 10, final: 10, assessment: 'Hoàn thành tốt' },
];
const initialAssignments = [
    { id: 1, teacherId: 1, classId: 1, subjectId: 1, day: 'Thứ 2', period: 1 },
    { id: 2, teacherId: 1, classId: 1, subjectId: 2, day: 'Thứ 2', period: 2 },
    { id: 3, teacherId: 2, classId: 2, subjectId: 1, day: 'Thứ 3', period: 1 },
];
const initialUsers = [
    { id: 1, username: 'admin', password: 'admin123', role: 'admin' },
    { id: 2, username: 'ph_giabao', password: 'password', role: 'parent', studentId: 1 },
    { id: 3, username: 'gv_lan', password: 'password', role: 'teacher', teacherId: 1 },
];
const initialFees = [
    { id: 1, studentId: 1, feeName: 'Học phí Tháng 9/2024', amount: 1500000, status: 'Chưa thanh toán' }
];
const teacherRoles = { principal: 'Hiệu trưởng', vice_principal: 'Hiệu phó', general_in_charge: 'Tổng phụ trách Đội', department_head: 'Tổ trưởng', teacher: 'Giáo viên', };
const assessmentLevels = { 'Hoàn thành tốt': 'Hoàn thành tốt', 'Hoàn thành': 'Hoàn thành', 'Cần cố gắng': 'Cần cố gắng', };

// === Theme Context for Dark/Light Mode ===
const ThemeContext = createContext(null);
const ThemeProvider = ({ children }) => {
    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');
    useEffect(() => { const root = window.document.documentElement; if (theme === 'dark') { root.classList.add('dark'); } else { root.classList.remove('dark'); } localStorage.setItem('theme', theme); }, [theme]);
    const toggleTheme = () => setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
    return <ThemeContext.Provider value={{ theme, toggleTheme }}>{children}</ThemeContext.Provider>;
};
const useTheme = () => useContext(ThemeContext);

const ThemeToggleButton = () => {
    const { theme, toggleTheme } = useTheme();
    if (!theme) return null;
    return <button onClick={toggleTheme} title="Đổi giao diện" className="p-2 text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-full">{theme === 'light' ? <Moon size={22} /> : <Sun size={22} />}</button>;
};

// === Main App Component ===
function AppContent() {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const userFromSession = sessionStorage.getItem('currentUser');
    if (userFromSession) setCurrentUser(JSON.parse(userFromSession));
    setLoading(false);
  }, []);

  const handleLogin = (username, password) => {
    const allUsers = JSON.parse(localStorage.getItem('users')) || initialUsers;
    const allTeachers = JSON.parse(localStorage.getItem('teachers')) || initialTeachers;
    const allClasses = JSON.parse(localStorage.getItem('classes')) || initialClasses;
    const user = allUsers.find(u => u.username === username && u.password === password);
    if (user) {
      let userData = { ...user };
      if(user.role === 'teacher' && user.teacherId) {
          const teacherInfo = allTeachers.find(t => t.id === user.teacherId);
          const homeroomClass = allClasses.find(c => c.homeroomTeacherId === user.teacherId);
          userData = { ...userData, ...teacherInfo, isHomeroom: !!homeroomClass, homeroomClassId: homeroomClass?.id };
      }
      sessionStorage.setItem('currentUser', JSON.stringify(userData));
      setCurrentUser(userData);
      return true;
    }
    return false;
  };

  const handleLogout = () => { sessionStorage.removeItem('currentUser'); setCurrentUser(null); };

  if (loading) return <div className="flex items-center justify-center h-screen bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200">Đang tải...</div>;
  if (!currentUser) return <LoginScreen onLogin={handleLogin} />;
  
  const roleComponent = {
      admin: <AdminApplication currentUser={currentUser} onLogout={handleLogout} />,
      parent: <ParentApplication currentUser={currentUser} onLogout={handleLogout} />,
      teacher: <TeacherApplication currentUser={currentUser} onLogout={handleLogout} />,
  };
  return roleComponent[currentUser.role] || <LoginScreen onLogin={handleLogin}/>;
}

export default function App() { return (<ThemeProvider><AppContent /></ThemeProvider>); }

// === Login Screen ===
const LoginScreen = ({ onLogin }) => {
  const [username, setUsername] = useState(''); const [password, setPassword] = useState(''); const [error, setError] = useState('');
  const handleSubmit = async (e) => { e.preventDefault(); const success = await onLogin(username, password); if (!success) setError('Tên đăng nhập hoặc mật khẩu không đúng.'); };
  return ( <div className="flex items-center justify-center h-screen bg-gray-100 dark:bg-gray-900"><div className="w-full max-w-md p-8 space-y-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg"><h2 className="text-3xl font-bold text-center text-gray-800 dark:text-gray-100">Cổng Thông Tin Trường Tiểu Học</h2><form onSubmit={handleSubmit} className="space-y-6"><div><label className="text-sm font-bold text-gray-600 dark:text-gray-300 block">Tên đăng nhập</label><input type="text" value={username} onChange={(e) => setUsername(e.target.value)} className="w-full p-3 mt-2 text-gray-700 dark:text-gray-200 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600" required /></div><div><label className="text-sm font-bold text-gray-600 dark:text-gray-300 block">Mật khẩu</label><input type="password" value={password} onChange={(e) => setPassword(e.target.value)} className="w-full p-3 mt-2 text-gray-700 dark:text-gray-200 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600" required /></div>{error && <p className="text-red-500 text-sm text-center">{error}</p>}<div><button type="submit" className="w-full py-3 mt-4 font-bold text-white bg-green-600 rounded-lg hover:bg-green-700">Đăng nhập</button></div><div className="text-center text-sm text-gray-500 dark:text-gray-400 pt-4 border-t dark:border-gray-600"><p className="font-semibold mb-2">Tài khoản mẫu:</p><p><span className="font-medium">Admin:</span> admin / admin123</p><p><span className="font-medium">GVCN:</span> gv_lan / password</p><p><span className="font-medium">Phụ huynh:</span> ph_giabao / password</p></div></form></div></div> );
};

// === Admin Application ===
const AdminApplication = ({ currentUser, onLogout }) => {
  const [currentView, setCurrentView] = useState('dashboard');
  const [students, setStudents] = useState(() => JSON.parse(localStorage.getItem('students')) || initialStudents);
  const [grades, setGrades] = useState(() => JSON.parse(localStorage.getItem('grades')) || initialGrades);
  const [fees, setFees] = useState(() => JSON.parse(localStorage.getItem('fees')) || initialFees);
  const [teachers, setTeachers] = useState(() => JSON.parse(localStorage.getItem('teachers')) || initialTeachers);
  const [classes, setClasses] = useState(() => JSON.parse(localStorage.getItem('classes')) || initialClasses);
  const [subjects, setSubjects] = useState(() => JSON.parse(localStorage.getItem('subjects')) || initialSubjects);
  const [departments, setDepartments] = useState(() => JSON.parse(localStorage.getItem('departments')) || initialDepartments);
  const [users, setUsers] = useState(() => JSON.parse(localStorage.getItem('users')) || initialUsers);
  const [assignments, setAssignments] = useState(() => JSON.parse(localStorage.getItem('assignments')) || initialAssignments);
  const [modal, setModal] = useState({ type: null, data: null });
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);
  const [confirmAction, setConfirmAction] = useState(null);

  useEffect(() => {
    const derivedSchedules = assignments.map(a => { const aClass = classes.find(c => c.id === a.classId); const subject = subjects.find(s => s.id === a.subjectId); return { id: a.id, teacherId: a.teacherId, day: a.day, period: a.period, className: aClass?.name || '---', subjectName: subject?.name || '---' }; });
    const data = { students, grades, fees, teachers, classes, subjects, departments, users, assignments, schedules: derivedSchedules };
    for (const key in data) { localStorage.setItem(key, JSON.stringify(data[key])); }
  }, [students, grades, fees, teachers, classes, subjects, departments, users, assignments]);

  const openModal = (type, data = null) => setModal({ type, data });
  const closeModal = () => setModal({ type: null, data: null });
  const handleDelete = (action) => { setConfirmAction(() => action); setIsConfirmModalOpen(true); };
  const handleCloseConfirmModal = () => { setIsConfirmModalOpen(false); setConfirmAction(null); };

  const handleSave = (type, data) => {
    const saveData = (state, setState) => { if (data.id) setState(state.map(item => item.id === data.id ? data : item)); else { const newId = state.length > 0 ? Math.max(...state.map(i => i.id)) + 1 : 1; setState([...state, { ...data, id: newId }]); } };
    const map = { student: [students, setStudents], teacher: [teachers, setTeachers], class: [classes, setClasses], user: [users, setUsers], assignment: [assignments, setAssignments], subject: [subjects, setSubjects] };
    if (map[type]) saveData(...map[type]);
    closeModal();
  };
  
  const handleSaveDepartment = (deptData) => {
      if(deptData.id) { setDepartments(departments.map(d => d.id === deptData.id ? deptData : d)); } 
      else { const newId = departments.length > 0 ? Math.max(...departments.map(i => i.id)) + 1 : 1; setDepartments([...departments, {...deptData, id: newId}]); }
      closeModal();
  }

  const renderView = () => {
    const views = {
        dashboard: <DashboardView studentCount={students.length} teacherCount={teachers.length} classCount={classes.length} />,
        profiles: <StudentProfileView allStudents={students} classes={classes} onAdd={(data) => openModal('student', data)} onEdit={(s) => openModal('student', s)} onDelete={(id) => handleDelete(() => { setStudents(students.filter(s => s.id !== id)); handleCloseConfirmModal(); })} />,
        grades: <GradeManagementView students={students} grades={grades} setGrades={setGrades} classes={classes} subjects={subjects} assignments={assignments} />,
        fees: <FeeManagementView allStudents={students} fees={fees} setFees={setFees} />,
        users: <UserManagementView users={users} onAdd={() => openModal('user')} onEdit={(user) => openModal('user', user)} onDelete={(id) => handleDelete(() => { if (id === 1) return alert("Không thể xóa Admin gốc."); setUsers(users.filter(u => u.id !== id)); handleCloseConfirmModal(); })} />,
        teachers: <TeacherManagementView allTeachers={teachers} departments={departments} onAdd={() => openModal('teacher')} onEdit={(t) => openModal('teacher', t)} onDelete={(id) => handleDelete(() => { setTeachers(teachers.filter(t => t.id !== id)); handleCloseConfirmModal(); })} />,
        classes: <ClassManagementView classes={classes} teachers={teachers} students={students} onAdd={() => openModal('class')} onEdit={(c) => openModal('class', c)} onDelete={(id) => handleDelete(() => { setClasses(classes.filter(c => c.id !== id)); handleCloseConfirmModal(); })} />,
        departments: <DepartmentManagementView departments={departments} teachers={teachers} onAddDept={() => openModal('department')} onEditDept={(d) => openModal('department', d)} onDeleteDept={(id) => handleDelete(() => { setDepartments(departments.filter(d => d.id !== id)); handleCloseConfirmModal(); })} />,
        subjects: <SubjectManagementView subjects={subjects} onAdd={() => openModal('subject')} onEdit={(s) => openModal('subject', s)} onDelete={(id) => handleDelete(() => { setSubjects(subjects.filter(s => s.id !== id)); handleCloseConfirmModal(); })} />,
        assignments: <AssignmentView assignments={assignments} setAssignments={setAssignments} teachers={teachers} classes={classes} subjects={subjects} />
    };
    return views[currentView] || views.dashboard;
  };

  return (
    <div className="flex h-screen bg-gray-100 dark:bg-gray-900 font-sans">
      <SidebarAdmin currentView={currentView} setCurrentView={setCurrentView} />
      <main className="flex-1 p-4 md:p-8 overflow-y-auto"><HeaderAdmin currentUser={currentUser} onLogout={onLogout} />{renderView()}</main>
      {modal.type === 'student' && <StudentFormModal student={modal.data} classes={classes} onSave={(d) => handleSave('student', d)} onClose={closeModal} />}
      {modal.type === 'teacher' && <TeacherFormModal teacher={modal.data} departments={departments} onSave={(d) => handleSave('teacher', d)} onClose={closeModal} />}
      {modal.type === 'class' && <ClassFormModal classData={modal.data} teachers={teachers} onSave={(d) => handleSave('class', d)} onClose={closeModal} />}
      {modal.type === 'department' && <DepartmentFormModal department={modal.data} onSave={handleSaveDepartment} onClose={closeModal} />}
      {modal.type === 'subject' && <SubjectFormModal subject={modal.data} onSave={(d) => handleSave('subject', d)} onClose={closeModal} />}
      {modal.type === 'user' && <UserFormModal user={modal.data} students={students} teachers={teachers} users={users} onSave={(d) => handleSave('user', d)} onClose={closeModal} />}
      <ConfirmModal isOpen={isConfirmModalOpen} onClose={handleCloseConfirmModal} onConfirm={confirmAction} title="Xác nhận Xóa" message="Bạn có chắc chắn muốn xóa mục này? Hành động này không thể hoàn tác." />
    </div>
  );
};

// === Parent Application ===
const ParentApplication = ({ currentUser, onLogout }) => {
  const [currentView, setCurrentView] = useState('grades');
  const [fees, setFees] = useState(() => JSON.parse(localStorage.getItem('fees')) || initialFees);
  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
  const [payingFee, setPayingFee] = useState(null);

  const allStudents = JSON.parse(localStorage.getItem('students')) || [];
  const allGrades = JSON.parse(localStorage.getItem('grades')) || [];
  const allSubjects = JSON.parse(localStorage.getItem('subjects')) || [];
  const myStudent = useMemo(() => allStudents.find(s => s.id === currentUser.studentId), [allStudents, currentUser.studentId]);
  const myGrades = useMemo(() => allGrades.filter(g => g.studentId === currentUser.studentId), [allGrades, currentUser.studentId]);
  const myFees = useMemo(() => fees.filter(f => f.studentId === currentUser.studentId), [fees, currentUser.studentId]);
  useEffect(() => { localStorage.setItem('fees', JSON.stringify(fees)); }, [fees]);
  const handleOpenPaymentModal = (fee) => { setPayingFee(fee); setIsPaymentModalOpen(true); };
  const handleClosePaymentModal = () => { setIsPaymentModalOpen(false); setPayingFee(null); };
  const handleConfirmPayment = () => { setFees(prevFees => prevFees.map(fee => fee.id === payingFee.id ? { ...fee, status: 'Đã thanh toán' } : fee)); handleClosePaymentModal(); alert(`Đã xác nhận thanh toán cho khoản "${payingFee.feeName}".`); };
  const renderView = () => { if (!myStudent) { return <div className="text-center p-8 bg-white dark:bg-gray-800 rounded-lg shadow">Không tìm thấy thông tin học sinh.</div> } switch (currentView) { case 'grades': return <StudentGradeView grades={myGrades} subjects={allSubjects} />; case 'fees': return <StudentFeeView fees={myFees} onPay={handleOpenPaymentModal} />; default: return <StudentGradeView grades={myGrades} subjects={allSubjects} />; } };
  return (<div className="flex h-screen bg-gray-100 dark:bg-gray-900 font-sans"><SidebarParent currentView={currentView} setCurrentView={setCurrentView} /><main className="flex-1 p-4 md:p-8 overflow-y-auto"><HeaderParent currentUser={currentUser} studentName={myStudent?.name} onLogout={onLogout} />{renderView()}</main>{isPaymentModalOpen && <PaymentModal fee={payingFee} onClose={handleClosePaymentModal} onConfirm={handleConfirmPayment} />}</div>);
};

// === Teacher Application ===
const TeacherApplication = ({ currentUser, onLogout }) => {
    const [currentView, setCurrentView] = useState('grades');
    const allStudents = JSON.parse(localStorage.getItem('students')) || [];
    const [allGrades, setAllGrades] = useState(() => JSON.parse(localStorage.getItem('grades')) || initialGrades);
    const allClasses = JSON.parse(localStorage.getItem('classes')) || [];
    const allSubjects = JSON.parse(localStorage.getItem('subjects')) || [];
    const allAssignments = JSON.parse(localStorage.getItem('assignments')) || [];
    const allSchedules = JSON.parse(localStorage.getItem('schedules')) || [];
    const allTeachers = JSON.parse(localStorage.getItem('teachers')) || [];
    const myAssignments = useMemo(() => allAssignments.filter(a => a.teacherId === currentUser.id), [allAssignments, currentUser.id]);
    const myClassIds = useMemo(() => [...new Set(myAssignments.map(a => a.classId))], [myAssignments]);
    const myClasses = useMemo(() => allClasses.filter(c => myClassIds.includes(c.id)), [allClasses, myClassIds]);
    const mySchedule = useMemo(() => allSchedules.filter(s => s.teacherId === currentUser.id), [allSchedules, currentUser.id]);
    const myDepartmentMembers = useMemo(() => { if (currentUser.role !== 'department_head') return []; return allTeachers.filter(t => t.departmentId === currentUser.departmentId); }, [allTeachers, currentUser]);
    useEffect(() => { localStorage.setItem('grades', JSON.stringify(allGrades)); }, [allGrades]);
    const renderView = () => {
        const homeroomStudents = currentUser.isHomeroom ? allStudents.filter(s => s.classId === currentUser.homeroomClassId) : [];
        const homeroomGrades = currentUser.isHomeroom ? allGrades.filter(g => homeroomStudents.some(s => s.id === g.studentId)) : [];
        const views = { grades: <GradeManagementView students={allStudents} grades={allGrades} setGrades={setAllGrades} classes={myClasses.length > 0 ? myClasses : (currentUser.isHomeroom ? allClasses.filter(c => c.id === currentUser.homeroomClassId) : [])} subjects={allSubjects} assignments={allAssignments} teacherId={currentUser.id} />, homeroom: currentUser.isHomeroom ? <HomeroomView students={homeroomStudents} grades={homeroomGrades} subjects={allSubjects} /> : null, schedule: <ScheduleView schedule={mySchedule} title="Thời khóa biểu cá nhân" />, department: currentUser.role === 'department_head' ? <DepartmentScheduleView teachers={myDepartmentMembers} schedules={allSchedules} /> : null };
        return views[currentView] || views.grades;
    };
    return ( <div className="flex h-screen bg-gray-100 dark:bg-gray-900 font-sans"> <SidebarTeacher currentUser={currentUser} currentView={currentView} setCurrentView={setCurrentView} /> <main className="flex-1 p-4 md:p-8 overflow-y-auto"> <HeaderAdmin currentUser={currentUser} onLogout={onLogout} /> {renderView()} </main> </div> );
};

// === Reusable & General Components ===
const ConfirmModal = ({ isOpen, onClose, onConfirm, title, message }) => { if (!isOpen) return null; return ( <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50"><div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-6 w-full max-w-sm m-4 text-center"><div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100"><AlertCircle className="h-6 w-6 text-red-600" /></div><h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mt-4">{title}</h3><div className="mt-2"><p className="text-sm text-gray-500 dark:text-gray-400">{message}</p></div><div className="mt-5 flex justify-center gap-4"><button type="button" onClick={onClose} className="w-full inline-flex justify-center rounded-md border dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600">Hủy</button><button type="button" onClick={onConfirm} className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 font-medium text-white hover:bg-red-700">Xác nhận</button></div></div></div> ); };
const DashboardView = ({ studentCount, teacherCount, classCount }) => ( <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm flex items-center gap-6 border-l-4 border-green-500"><div className="bg-green-100 dark:bg-green-900/50 p-4 rounded-full"><Users className="text-green-500 dark:text-green-300" size={32} /></div><div><h3 className="text-gray-500 dark:text-gray-400 text-lg">Tổng số Học sinh</h3><p className="text-3xl font-bold text-gray-800 dark:text-gray-100">{studentCount}</p></div></div> <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm flex items-center gap-6 border-l-4 border-teal-500"><div className="bg-teal-100 dark:bg-teal-900/50 p-4 rounded-full"><UserCheck className="text-teal-500 dark:text-teal-300" size={32} /></div><div><h3 className="text-gray-500 dark:text-gray-400 text-lg">Tổng số Giáo viên</h3><p className="text-3xl font-bold text-gray-800 dark:text-gray-100">{teacherCount}</p></div></div> <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm flex items-center gap-6 border-l-4 border-yellow-500"><div className="bg-yellow-100 dark:bg-yellow-900/50 p-4 rounded-full"><Home className="text-yellow-500 dark:text-yellow-300" size={32} /></div><div><h3 className="text-gray-500 dark:text-gray-400 text-lg">Tổng số Lớp học</h3><p className="text-3xl font-bold text-gray-800 dark:text-gray-100">{classCount}</p></div></div> </div> );
const FormModal = ({ title, onClose, onSubmit, children }) => ( <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 overflow-y-auto"><div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-8 w-full max-w-lg m-4"><div className="flex justify-between items-center mb-6"><h3 className="text-2xl font-bold text-gray-800 dark:text-gray-100">{title}</h3><button onClick={onClose} className="p-2 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full"><X size={24} /></button></div><form onSubmit={onSubmit} className="space-y-4">{children}<div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} className="py-2 px-4 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500">Hủy</button><button type="submit" className="py-2 px-6 bg-green-500 text-white rounded-lg hover:bg-green-600 shadow">Lưu</button></div></form></div></div> );
const FormInput = ({ label, name, value, onChange, required = false, ...props }) => (<div><label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{label}</label><input name={name} value={value} onChange={onChange} className="w-full border border-gray-300 dark:border-gray-600 rounded-lg p-2 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200" required={required} {...props} /></div>);
const FormSelect = ({ label, name, value, onChange, children, required = false }) => (<div><label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{label}</label><select name={name} value={value} onChange={onChange} className="w-full border border-gray-300 dark:border-gray-600 rounded-lg p-2 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200" required={required}>{children}</select></div>);
const SearchBar = ({ searchTerm, setSearchTerm, placeholder }) => ( <div className="relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} /> <input type="text" placeholder={placeholder} value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-800 dark:text-gray-200" /> </div> );

// === Admin Components ===
const SidebarAdmin = ({ currentView, setCurrentView }) => { const navItems = [ { id: 'dashboard', label: 'Bảng điều khiển', icon: LayoutDashboard }, { id: 'departments', label: 'Tổ Chuyên môn', icon: Library }, { id: 'teachers', label: 'Quản lý Giáo viên', icon: UserCheck }, { id: 'classes', label: 'Quản lý Lớp học', icon: Home }, { id: 'subjects', label: 'Quản lý Môn học', icon: Award }, { id: 'assignments', label: 'Phân công GD', icon: Briefcase }, { id: 'profiles', label: 'Quản lý Hồ sơ HS', icon: Users }, { id: 'grades', label: 'Quản lý Điểm số', icon: BookUser }, { id: 'fees', label: 'Quản lý Học phí', icon: Banknote }, { id: 'users', label: 'Quản lý Tài khoản', icon: ShieldCheck }, ]; return ( <nav className="w-20 lg:w-64 bg-white dark:bg-gray-800 shadow-lg"><div className="p-4 lg:p-6 border-b border-gray-200 dark:border-gray-700"><h1 className="text-xl lg:text-2xl font-bold text-green-600 text-center lg:text-left"><span className="lg:hidden">QLTH</span><span className="hidden lg:inline">Quản lý Tiểu học</span></h1></div><ul className="mt-6">{navItems.map(item => (<li key={item.id} className="px-2 lg:px-4 mb-2"><button onClick={() => setCurrentView(item.id)} className={`w-full flex items-center justify-center lg:justify-start p-3 rounded-lg ${currentView === item.id ? 'bg-green-500 text-white shadow-md' : 'text-gray-600 dark:text-gray-300 hover:bg-green-50 dark:hover:bg-gray-700'}`}><item.icon className="h-6 w-6 lg:mr-4" /> <span className="hidden lg:inline font-medium">{item.label}</span></button></li>))}</ul></nav> ); };
const HeaderAdmin = ({ currentUser, onLogout }) => ( <header className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm mb-6 flex justify-between items-center"> <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100">Hệ thống Quản lý Trường Tiểu học</h2> <div className="flex items-center gap-3"><ThemeToggleButton /><span className="text-gray-600 dark:text-gray-300 hidden md:inline">Chào, <span className="font-bold">{currentUser.name || 'Admin'}</span></span><button onClick={onLogout} title="Đăng xuất" className="p-2 text-gray-500 dark:text-gray-400 hover:bg-red-100 hover:text-red-600 dark:hover:bg-red-900/50 rounded-full"><LogOut size={22} /></button></div></header>);
const DepartmentManagementView = ({ departments, teachers, onAddDept, onEditDept, onDeleteDept }) => { const [selectedDeptId, setSelectedDeptId] = useState(departments[0]?.id || null); const departmentTeachers = useMemo(() => teachers.filter(t => t.departmentId === selectedDeptId), [teachers, selectedDeptId]); const getTitle = (gender) => gender === 'Nữ' ? 'Cô' : 'Thầy'; return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"> <div className="grid grid-cols-1 md:grid-cols-2 gap-8"> <div> <div className="flex justify-between items-center mb-4"> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Tổ Chuyên môn</h3> <button onClick={onAddDept} className="bg-green-500 text-white px-3 py-1 rounded-lg text-sm">Thêm Tổ</button> </div> <ul className="space-y-2">{departments.map(dept => (<li key={dept.id} onClick={() => setSelectedDeptId(dept.id)} className={`flex justify-between items-center p-3 rounded-lg cursor-pointer text-gray-800 dark:text-gray-200 ${selectedDeptId === dept.id ? 'bg-green-100 dark:bg-green-900/50' : 'hover:bg-gray-50 dark:hover:bg-gray-700'}`}><span className="font-medium">{dept.name}</span><div className="space-x-2"><button onClick={(e) => { e.stopPropagation(); onEditDept(dept); }} className="p-1 text-green-600"><Edit size={16}/></button><button onClick={(e) => { e.stopPropagation(); onDeleteDept(dept.id);}} className="p-1 text-red-600"><Trash2 size={16}/></button></div></li>))}</ul> </div> <div> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Thông tin Tổ: {departments.find(d=>d.id === selectedDeptId)?.name}</h3> {selectedDeptId ? ( <div className="space-y-6"> <div> <h4 className="font-semibold text-gray-600 dark:text-gray-300 mb-2">Giáo viên trong Tổ</h4> <ul className="space-y-2">{departmentTeachers.map(teacher => ( <li key={teacher.id} className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg"> <div className="text-gray-800 dark:text-gray-200"> <p className="font-medium">{`${getTitle(teacher.gender)} ${teacher.name}`}</p> <p className="text-sm text-gray-500 dark:text-gray-400">{teacherRoles[teacher.role]}</p> </div> </li> ))}</ul> </div> </div> ) : <p className="text-gray-500 dark:text-gray-400">Chọn một tổ để xem chi tiết.</p>} </div> </div> </div> ); };
const DepartmentFormModal = ({ department, onSave, onClose }) => { const [name, setName] = useState(department?.name || ''); const handleSubmit = (e) => { e.preventDefault(); onSave({ ...department, name }); }; return ( <FormModal title={department ? 'Sửa Tổ Chuyên môn' : 'Thêm Tổ Chuyên môn'} onClose={onClose} onSubmit={handleSubmit}> <FormInput label="Tên Tổ Chuyên môn" name="name" value={name} onChange={e => setName(e.target.value)} required /> </FormModal> ); };
const SubjectManagementView = ({ subjects, onAdd, onEdit, onDelete }) => ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"><div className="flex justify-between items-center mb-4"><h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Quản lý Môn học</h3><button onClick={onAdd} className="bg-green-500 text-white px-4 py-2 rounded-lg">Thêm Môn</button></div><div className="overflow-x-auto"><table className="w-full text-left text-gray-800 dark:text-gray-300"><thead className="text-gray-700 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><th className="p-4 font-semibold">Tên môn học</th><th className="p-4 font-semibold">Loại đánh giá</th><th className="p-4 font-semibold text-center">Hành động</th></tr></thead><tbody>{subjects.map(s => (<tr key={s.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"><td className="p-4">{s.name}</td><td className="p-4"><span className={`px-2 py-1 text-xs font-medium rounded-full ${s.type === 'score' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'}`}>{s.type === 'score' ? 'Cho điểm' : 'Nhận xét'}</span></td><td className="p-4 text-center space-x-2"><button onClick={() => onEdit(s)} className="p-2 text-green-600"><Edit size={18}/></button><button onClick={() => onDelete(s.id)} className="p-2 text-red-600"><Trash2 size={18}/></button></td></tr>))}</tbody></table></div></div>);
const SubjectFormModal = ({ subject, onSave, onClose }) => { const [formData, setFormData] = useState({ name: subject?.name || '', type: subject?.type || 'assessment' }); const handleChange = e => setFormData({ ...formData, [e.target.name]: e.target.value }); const handleSubmit = e => { e.preventDefault(); onSave({ ...subject, ...formData }); }; return (<FormModal title={subject ? "Sửa Môn học" : "Thêm Môn học"} onClose={onClose} onSubmit={handleSubmit}><FormInput label="Tên môn học" name="name" value={formData.name} onChange={handleChange} required /><FormSelect label="Loại đánh giá" name="type" value={formData.type} onChange={handleChange}><option value="assessment">Nhận xét</option><option value="score">Cho điểm</option></FormSelect></FormModal>); };
const TeacherManagementView = ({ allTeachers, departments, onAdd, onEdit, onDelete }) => { const [searchTerm, setSearchTerm] = useState(''); const filteredTeachers = useMemo(() => allTeachers.filter(t => t.name.toLowerCase().includes(searchTerm.toLowerCase())), [allTeachers, searchTerm]); const getTitle = (gender) => gender === 'Nữ' ? 'Cô' : 'Thầy'; return (<div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"><div className="flex justify-between items-center mb-4 flex-wrap gap-4"><h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Quản lý Giáo viên</h3><div className="flex items-center gap-2 flex-grow sm:flex-grow-0"><SearchBar searchTerm={searchTerm} setSearchTerm={setSearchTerm} placeholder="Tìm giáo viên..." /><button onClick={onAdd} className="bg-green-500 text-white px-4 py-2 rounded-lg">Thêm</button></div></div><div className="overflow-x-auto"><table className="w-full text-left text-gray-800 dark:text-gray-300"><thead className="text-gray-700 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><th className="p-4 font-semibold">Họ tên</th><th className="p-4 font-semibold">Giới tính</th><th className="p-4 font-semibold">Vai trò</th><th className="p-4 font-semibold">Tổ Chuyên môn</th><th className="p-4 font-semibold text-center">Hành động</th></tr></thead><tbody>{filteredTeachers.map(t => { const dept = departments.find(d => d.id === t.departmentId); return (<tr key={t.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"><td className="p-4">{`${getTitle(t.gender)} ${t.name}`}</td><td className="p-4">{t.gender}</td><td className="p-4">{teacherRoles[t.role] || t.role}</td><td className="p-4">{dept?.name || 'Chưa có'}</td><td className="p-4 text-center space-x-2"><button onClick={() => onEdit(t)} className="p-2 text-green-600"><Edit size={18}/></button><button onClick={() => onDelete(t.id)} className="p-2 text-red-600"><Trash2 size={18}/></button></td></tr>)})}</tbody></table></div></div>);};
const TeacherFormModal = ({ teacher, departments, onSave, onClose }) => { const [formData, setFormData] = useState({ name: teacher?.name || '', gender: teacher?.gender || 'Nam', dob: teacher?.dob || '', phone: teacher?.phone || '', departmentId: teacher?.departmentId || '', role: teacher?.role || 'teacher' }); const handleChange = e => setFormData({ ...formData, [e.target.name]: e.target.value }); const handleSubmit = e => { e.preventDefault(); onSave({ ...teacher, ...formData, departmentId: parseInt(formData.departmentId) }); }; return (<FormModal title={ teacher ? 'Sửa thông tin Giáo viên' : 'Thêm Giáo viên' } onClose={onClose} onSubmit={handleSubmit}><div className="grid grid-cols-1 md:grid-cols-2 gap-4"><FormInput label="Họ tên" name="name" value={formData.name} onChange={handleChange} required /><FormInput label="Ngày sinh" name="dob" type="date" value={formData.dob} onChange={handleChange} required /></div><div className="grid grid-cols-1 md:grid-cols-2 gap-4"><FormInput label="Số điện thoại" name="phone" value={formData.phone} onChange={handleChange} /><FormSelect label="Giới tính" name="gender" value={formData.gender} onChange={handleChange}><option value="Nam">Nam</option><option value="Nữ">Nữ</option></FormSelect></div><div className="grid grid-cols-1 md:grid-cols-2 gap-4"><FormSelect label="Tổ chuyên môn" name="departmentId" value={formData.departmentId} onChange={handleChange}><option value="">Chọn tổ</option>{departments.map(d=><option key={d.id} value={d.id}>{d.name}</option>)}</FormSelect><FormSelect label="Vai trò" name="role" value={formData.role} onChange={handleChange}>{Object.entries(teacherRoles).map(([roleKey, roleName]) => ( <option key={roleKey} value={roleKey}>{roleName}</option> ))}</FormSelect></div></FormModal>); };
const ClassManagementView = ({ classes, teachers, students, onAdd, onEdit, onDelete }) => ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"> <div className="flex justify-between items-center mb-4"><h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Danh sách Lớp học</h3><button onClick={onAdd} className="bg-green-500 text-white px-4 py-2 rounded-lg">Thêm Lớp</button></div> <div className="overflow-x-auto"><table className="w-full text-left text-gray-800 dark:text-gray-300"><thead className="text-gray-700 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><th className="p-4 font-semibold">Tên lớp</th><th className="p-4 font-semibold">Giáo viên Chủ nhiệm</th><th className="p-4 font-semibold">Sỉ số / Giới tính</th><th className="p-4 font-semibold text-center">Hành động</th></tr></thead><tbody>{classes.map(c => { const teacher = teachers.find(t => t.id === c.homeroomTeacherId); const classStudents = students.filter(s => s.classId === c.id); const classSize = classStudents.length; const maleCount = classStudents.filter(s => s.gender === 'Nam').length; const femaleCount = classStudents.filter(s => s.gender === 'Nữ').length; return (<tr key={c.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"><td className="p-4">{c.name}</td><td className="p-4">{teacher ? `${teacher.gender === 'Nữ' ? 'Cô' : 'Thầy'} ${teacher.name}` : 'Chưa phân công'}</td><td className="p-4">{`${classSize} (Nam: ${maleCount}, Nữ: ${femaleCount})`}</td><td className="p-4 text-center space-x-2"><button onClick={() => onEdit(c)} className="p-2 text-green-600"><Edit size={18}/></button><button onClick={() => onDelete(c.id)} className="p-2 text-red-600"><Trash2 size={18}/></button></td></tr>);})}</tbody></table></div> </div> );
const ClassFormModal = ({ classData, teachers, onSave, onClose }) => { const [formData, setFormData] = useState({ name: classData?.name || '', homeroomTeacherId: classData?.homeroomTeacherId || '' }); const handleChange = e => setFormData({ ...formData, [e.target.name]: e.target.value }); const handleSubmit = e => { e.preventDefault(); onSave({ ...classData, ...formData, homeroomTeacherId: parseInt(formData.homeroomTeacherId) }); }; return (<FormModal title={classData ? 'Sửa thông tin Lớp' : 'Thêm Lớp mới'} onClose={onClose} onSubmit={handleSubmit}><FormInput label="Tên lớp" name="name" value={formData.name} onChange={handleChange} required /><FormSelect label="GVCN" name="homeroomTeacherId" value={formData.homeroomTeacherId} onChange={handleChange}><option value="">Chọn giáo viên</option>{teachers.map(t => <option key={t.id} value={t.id}>{`${t.gender === 'Nữ' ? 'Cô' : 'Thầy'} ${t.name}`}</option>)}</FormSelect></FormModal>); };
const StudentProfileView = ({ allStudents, classes, onAdd, onEdit, onDelete }) => { const [searchTerm, setSearchTerm] = useState(''); const [selectedClassId, setSelectedClassId] = useState(classes[0]?.id || null); const filteredStudents = useMemo(() => { return allStudents.filter(student => selectedClassId ? student.classId === selectedClassId : true).filter(student => student.name.toLowerCase().includes(searchTerm.toLowerCase())); }, [allStudents, selectedClassId, searchTerm]); const selectedClassStats = useMemo(() => { if (!selectedClassId) return null; const classStudents = allStudents.filter(student => student.classId === selectedClassId); const classSize = classStudents.length; const maleCount = classStudents.filter(s => s.gender === 'Nam').length; const femaleCount = classStudents.filter(s => s.gender === 'Nữ').length; return { classSize, maleCount, femaleCount }; }, [allStudents, selectedClassId]); return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"> <div className="flex justify-between items-center mb-4 flex-wrap gap-4"> <div className="flex items-baseline gap-4 flex-wrap"> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Hồ sơ Học sinh</h3> {selectedClassId && selectedClassStats && ( <span className="font-medium text-gray-600 dark:text-gray-400"> Sỉ số: {selectedClassStats.classSize} | Nam: {selectedClassStats.maleCount} | Nữ: {selectedClassStats.femaleCount} </span> )} </div> <div className="flex items-center gap-2 flex-grow sm:flex-grow-0"> <FormSelect name="classId" value={selectedClassId || ''} onChange={(e) => setSelectedClassId(e.target.value ? Number(e.target.value) : null)}> <option value="">Tất cả các lớp</option> {classes.map(c => <option key={c.id} value={c.id}>{c.name}</option>)} </FormSelect> <SearchBar searchTerm={searchTerm} setSearchTerm={setSearchTerm} placeholder="Tìm trong lớp..." /> <button onClick={() => onAdd({classId: selectedClassId})} className="bg-green-500 text-white px-4 py-2 rounded-lg shrink-0">Thêm</button> </div> </div> <div className="overflow-x-auto"><table className="w-full text-left text-gray-800 dark:text-gray-300"><thead className="text-gray-700 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><th className="p-4 font-semibold">Họ tên</th><th className="p-4 font-semibold">Ngày sinh</th><th className="p-4 font-semibold">Giới tính</th><th className="p-4 font-semibold">Địa chỉ</th><th className="p-4 font-semibold text-center">Hành động</th></tr></thead><tbody>{filteredStudents.map(s => (<tr key={s.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"><td className="p-4">{s.name}</td><td className="p-4">{s.dob}</td><td className="p-4">{s.gender}</td><td className="p-4">{s.address}</td><td className="p-4 text-center space-x-2"><button onClick={() => onEdit(s)} className="p-2 text-green-600"><Edit size={18}/></button><button onClick={() => onDelete(s.id)} className="p-2 text-red-600"><Trash2 size={18}/></button></td></tr>))}</tbody></table></div> </div> ); };
const StudentFormModal = ({ student, classes, onSave, onClose }) => { const [formData, setFormData] = useState({ name: student?.name || '', dob: student?.dob || '', gender: student?.gender || 'Nam', address: student?.address || '', classId: student?.classId || '', parentName: student?.parentName || '', parentPhone: student?.parentPhone || '' }); const handleChange = (e) => setFormData(p => ({ ...p, [e.target.name]: e.target.value })); const handleSubmit = (e) => { e.preventDefault(); onSave({ ...student, ...formData, classId: parseInt(formData.classId) }); }; return ( <FormModal title={student?.id ? 'Sửa Hồ sơ' : 'Thêm Học sinh mới'} onClose={onClose} onSubmit={handleSubmit}><div className="grid grid-cols-1 md:grid-cols-2 gap-4"><FormInput label="Họ tên" name="name" value={formData.name} onChange={handleChange} required /><FormSelect label="Giới tính" name="gender" value={formData.gender} onChange={handleChange}><option value="Nam">Nam</option><option value="Nữ">Nữ</option></FormSelect></div><div className="grid grid-cols-1 md:grid-cols-2 gap-4"><FormInput label="Ngày sinh" name="dob" type="date" value={formData.dob} onChange={handleChange} required /><FormSelect label="Lớp" name="classId" value={formData.classId} onChange={handleChange} required><option value="">-- Chọn lớp --</option>{classes.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}</FormSelect></div><FormInput label="Địa chỉ" name="address" value={formData.address} onChange={handleChange} /><div className="grid grid-cols-1 md:grid-cols-2 gap-4"><FormInput label="Tên phụ huynh" name="parentName" value={formData.parentName} onChange={handleChange} /><FormInput label="SĐT phụ huynh" name="parentPhone" value={formData.parentPhone} onChange={handleChange} /></div></FormModal> ); };
const GradeManagementView = ({ students, grades, setGrades, classes, subjects, assignments, teacherId }) => {
    const [selectedClassId, setSelectedClassId] = useState(classes[0]?.id || null);
    const [editingCell, setEditingCell] = useState(null); // { studentId, subjectId, type }
    const [cellValue, setCellValue] = useState('');

    const classStudents = useMemo(() => students.filter(s => s.classId === selectedClassId), [students, selectedClassId]);
    
    const classSubjects = useMemo(() => {
        if (!selectedClassId) return [];
        let relevantSubjectIds;
        if (teacherId) {
            // Teacher view: show subjects they are assigned to for this class
            relevantSubjectIds = assignments.filter(a => a.teacherId === teacherId && a.classId === selectedClassId).map(a => a.subjectId);
        } else {
            // Admin view: show all subjects that have assignments for this class
            relevantSubjectIds = assignments.filter(a => a.classId === selectedClassId).map(a => a.subjectId);
        }
        // Admin view (homeroom): also show all subjects for the class
        const homeroomTeacher = classes.find(c => c.id === selectedClassId)?.homeroomTeacherId;
        if (teacherId && teacherId === homeroomTeacher) {
            const allClassSubjectIds = assignments.filter(a => a.classId === selectedClassId).map(a => a.subjectId);
            relevantSubjectIds = [...new Set([...relevantSubjectIds, ...allClassSubjectIds])];
        }
        
        return subjects.filter(s => relevantSubjectIds.includes(s.id));
    }, [subjects, assignments, teacherId, selectedClassId, classes]);

    const handleCellClick = (studentId, subjectId, type) => {
        const grade = grades.find(g => g.studentId === studentId && g.subjectId === subjectId);
        setEditingCell({ studentId, subjectId, type });
        setCellValue(grade?.[type] ?? '');
    };

    const handleCellValueChange = (e) => setCellValue(e.target.value);

    const handleUpdateGrade = () => {
        if (!editingCell) return;
        const { studentId, subjectId, type } = editingCell;
        let valueToSave = cellValue;
        if(type === 'midterm' || type === 'final') {
            const numVal = parseFloat(cellValue);
            valueToSave = (isNaN(numVal) || cellValue.trim() === '') ? null : numVal;
        }

        setGrades(prevGrades => {
            const gradeRecord = prevGrades.find(g => g.studentId === studentId && g.subjectId === subjectId);
            if (gradeRecord) {
                return prevGrades.map(g => g.studentId === studentId && g.subjectId === subjectId ? { ...g, [type]: valueToSave } : g);
            } else {
                const newGrade = { id: Date.now(), studentId, subjectId, midterm: null, final: null, assessment: '' };
                newGrade[type] = valueToSave;
                return [...prevGrades, newGrade];
            }
        });
        setEditingCell(null);
    };

    const renderCell = (studentId, subject) => {
        const { id: subjectId, type: subjectType } = subject;
        const grade = grades.find(g => g.studentId === studentId && g.subjectId === subjectId) || {};
        
        const isEditing = (type) => editingCell?.studentId === studentId && editingCell?.subjectId === subjectId && editingCell?.type === type;

        if (subjectType === 'score') {
            return [
                <td key={`${subjectId}-midterm`} className="p-2 border border-gray-300 dark:border-gray-600 text-sm text-center">
                    {isEditing('midterm') ? (
                         <input type="number" step="0.1" min="0" max="10" value={cellValue} onChange={handleCellValueChange} onBlur={handleUpdateGrade} onKeyDown={e => e.key === 'Enter' && handleUpdateGrade()} autoFocus className="w-16 text-center bg-yellow-100 dark:bg-yellow-800 border-green-500 border-2 rounded"/>
                    ) : (
                         <span onClick={() => handleCellClick(studentId, subjectId, 'midterm')} className="cursor-pointer hover:bg-yellow-100 dark:hover:bg-yellow-800 rounded px-1">{grade.midterm ?? '-'}</span>
                    )}
                </td>,
                <td key={`${subjectId}-final`} className="p-2 border border-gray-300 dark:border-gray-600 text-sm text-center">
                    {isEditing('final') ? (
                         <input type="number" step="0.1" min="0" max="10" value={cellValue} onChange={handleCellValueChange} onBlur={handleUpdateGrade} onKeyDown={e => e.key === 'Enter' && handleUpdateGrade()} autoFocus className="w-16 text-center bg-yellow-100 dark:bg-yellow-800 border-green-500 border-2 rounded"/>
                    ) : (
                         <span onClick={() => handleCellClick(studentId, subjectId, 'final')} className="cursor-pointer hover:bg-yellow-100 dark:hover:bg-yellow-800 rounded px-1">{grade.final ?? '-'}</span>
                    )}
                </td>,
                 <td key={`${subjectId}-assessment`} className="p-2 border border-gray-300 dark:border-gray-600 text-sm">
                    {isEditing('assessment') ? (
                         <select value={cellValue} onChange={handleCellValueChange} onBlur={handleUpdateGrade} autoFocus className="w-full text-center bg-yellow-100 dark:bg-yellow-800 border-green-500 border-2 rounded">
                           <option value="">-- Chọn --</option>
                           {Object.keys(assessmentLevels).map(level => <option key={level} value={level}>{level}</option>)}
                         </select>
                    ) : (
                         <span onClick={() => handleCellClick(studentId, subjectId, 'assessment')} className="cursor-pointer hover:bg-yellow-100 dark:hover:bg-yellow-800 rounded px-1">{grade.assessment || '-'}</span>
                    )}
                </td>
            ];
        } else { // assessment type
            return (
                <td key={`${subjectId}-assessment`} colSpan="3" className="p-2 border border-gray-300 dark:border-gray-600 text-sm text-center">
                    {isEditing('assessment') ? (
                         <select value={cellValue} onChange={handleCellValueChange} onBlur={handleUpdateGrade} autoFocus className="w-full text-center bg-yellow-100 dark:bg-yellow-800 border-green-500 border-2 rounded">
                           <option value="">-- Chọn --</option>
                           {Object.keys(assessmentLevels).map(level => <option key={level} value={level}>{level}</option>)}
                         </select>
                    ) : (
                        <span onClick={() => handleCellClick(studentId, subjectId, 'assessment')} className="cursor-pointer hover:bg-yellow-100 dark:hover:bg-yellow-800 rounded px-1">{grade.assessment || '-'}</span>
                    )}
                </td>
            );
        }
    };


    return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm space-y-6"> <div className="flex items-center gap-4"> <label className="font-medium text-gray-800 dark:text-gray-200">Chọn lớp:</label> <select value={selectedClassId || ''} onChange={(e) => setSelectedClassId(Number(e.target.value))} className="border rounded-lg p-2 bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-200"> {classes.map(c => <option key={c.id} value={c.id}>{c.name}</option>)} </select> </div> <div className="overflow-x-auto"> <table className="w-full border-collapse text-center text-gray-800 dark:text-gray-200"> <thead className="text-gray-700 dark:text-gray-200"> <tr className="bg-gray-100 dark:bg-gray-700"> <th className="p-2 border border-gray-300 dark:border-gray-600" rowSpan="2">Học sinh</th> {classSubjects.map(sub => ( <th key={sub.id} className="p-2 border border-gray-300 dark:border-gray-600" colSpan={sub.type === 'score' ? 3 : 3}>{sub.name}</th> ))} </tr> <tr className="bg-gray-50 dark:bg-gray-700/50"> {classSubjects.map(sub => ( sub.type === 'score' ? (<React.Fragment key={sub.id}> <th className="p-2 border border-gray-300 dark:border-gray-600 text-xs font-medium">Giữa kỳ</th> <th className="p-2 border border-gray-300 dark:border-gray-600 text-xs font-medium">Cuối kỳ</th> <th className="p-2 border border-gray-300 dark:border-gray-600 text-xs font-medium">Nhận xét</th> </React.Fragment>) : (<th key={sub.id} colSpan="3" className="p-2 border border-gray-300 dark:border-gray-600 text-xs font-semibold">Đánh giá</th>) ))} </tr> </thead> <tbody> {classStudents.map(student => ( <tr key={student.id} className="hover:bg-gray-50 dark:hover:bg-gray-700/50"> <td className="p-2 border border-gray-300 dark:border-gray-600 font-medium text-left">{student.name}</td> {classSubjects.flatMap(subject => renderCell(student.id, subject))} </tr> ))} </tbody> </table> </div> </div> ); };
const FeeManagementView = ({ allStudents, fees, setFees }) => { const [searchTerm, setSearchTerm] = useState(''); const filteredStudents = useMemo(() => allStudents.filter(student => student.name.toLowerCase().includes(searchTerm.toLowerCase())), [allStudents, searchTerm]); const [selectedStudentId, setSelectedStudentId] = useState(filteredStudents[0]?.id || null); useEffect(() => { if (!filteredStudents.find(s => s.id === selectedStudentId)) { setSelectedStudentId(filteredStudents[0]?.id || null); } }, [filteredStudents, selectedStudentId]); const [newFee, setNewFee] = useState({ feeName: '', amount: '', dueDate: '' }); const studentFees = useMemo(() => fees.filter(f => f.studentId === selectedStudentId), [fees, selectedStudentId]); const handleFeeChange = (e) => setNewFee({ ...newFee, [e.target.name]: e.target.value }); const handleAddFeeSubmit = (e) => { e.preventDefault(); const amount = parseFloat(newFee.amount); if (!newFee.feeName || isNaN(amount) || !newFee.dueDate) return alert("Vui lòng nhập đầy đủ thông tin."); const newId = fees.length > 0 ? Math.max(...fees.map(i => i.id)) + 1 : 1; setFees([...fees, { id: newId, studentId: selectedStudentId, feeName: newFee.feeName, amount, dueDate: newFee.dueDate, status: 'Chưa thanh toán' }]); setNewFee({ feeName: '', amount: '', dueDate: '' }); }; const toggleStatus = (feeId) => setFees(fees.map(f => f.id === feeId ? { ...f, status: f.status === 'Đã thanh toán' ? 'Chưa thanh toán' : 'Đã thanh toán' } : f)); return (<div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm space-y-6"><div className="flex items-center gap-4 flex-wrap"><label className="font-medium shrink-0 text-gray-800 dark:text-gray-200">Quản lý học phí cho:</label><div className="flex-grow min-w-[200px]"><SearchBar searchTerm={searchTerm} setSearchTerm={setSearchTerm} placeholder="Tìm học sinh..."/></div><div className="flex-grow min-w-[200px]"><FormSelect name="studentId" value={selectedStudentId || ''} onChange={(e) => setSelectedStudentId(Number(e.target.value))}>{filteredStudents.length > 0 ? filteredStudents.map(s => <option key={s.id} value={s.id}>{s.name}</option>) : <option>Không tìm thấy học sinh</option>}</FormSelect></div></div>{selectedStudentId ? <div className="overflow-x-auto"><table className="w-full text-left text-gray-800 dark:text-gray-300"><thead className="text-gray-700 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><th className="p-4 font-semibold">Khoản thu</th><th className="p-4 font-semibold">Số tiền</th><th className="p-4 font-semibold">Hạn nộp</th><th className="p-4 font-semibold text-center">Trạng thái</th><th className="p-4 font-semibold text-center">Hành động</th></tr></thead><tbody>{studentFees.map(f => (<tr key={f.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"><td className="p-4">{f.feeName}</td><td className="p-4">{new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(f.amount)}</td><td className="p-4">{f.dueDate}</td><td className="p-4 text-center"><span className={`px-2 py-1 text-xs rounded-full ${f.status === 'Đã thanh toán' ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300'}`}>{f.status}</span></td><td className="p-4 text-center"><button onClick={() => toggleStatus(f.id)} className="text-sm bg-indigo-500 text-white px-3 py-1 rounded">Đổi</button></td></tr>))}</tbody><tfoot className="text-gray-800 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><td className="p-2"><input type="text" name="feeName" value={newFee.feeName} onChange={handleFeeChange} placeholder="Tên khoản thu" className="w-full border rounded p-2 bg-white dark:bg-gray-600 border-gray-300 dark:border-gray-500"/></td><td className="p-2"><input type="number" name="amount" value={newFee.amount} onChange={handleFeeChange} placeholder="Số tiền" className="w-full border rounded p-2 bg-white dark:bg-gray-600 border-gray-300 dark:border-gray-500"/></td><td className="p-2"><input type="date" name="dueDate" value={newFee.dueDate} onChange={handleFeeChange} className="w-full border rounded p-2 bg-white dark:bg-gray-600 border-gray-300 dark:border-gray-500"/></td><td className="p-2 text-center" colSpan="2"><button onClick={handleAddFeeSubmit} className="bg-green-500 text-white px-4 py-2 rounded-lg w-full">Thêm</button></td></tr></tfoot></table></div> : <p className="text-gray-500 dark:text-gray-400">Vui lòng chọn một học sinh.</p>}</div>);};
const UserManagementView = ({ users, onAdd, onEdit, onDelete }) => { return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"> <div className="flex justify-between items-center mb-4"> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Danh sách Tài khoản</h3> <button onClick={onAdd} className="bg-green-500 text-white px-4 py-2 rounded-lg">Thêm Tài khoản</button> </div> <div className="overflow-x-auto"> <table className="w-full text-left text-gray-800 dark:text-gray-300"> <thead className="text-gray-700 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><th className="p-4 font-semibold">Tên hiển thị</th><th className="p-4 font-semibold">Tên đăng nhập</th><th className="p-4 font-semibold">Vai trò</th><th className="p-4 font-semibold text-center">Hành động</th></tr></thead> <tbody>{users.map(user => ( <tr key={user.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"> <td className="p-4">{user.name}</td> <td className="p-4">{user.username}</td> <td className="p-4"><span className={`px-2 py-1 text-xs rounded-full ${user.role === 'admin' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-300' : (user.role === 'teacher' ? 'bg-teal-100 text-teal-800 dark:bg-teal-900/50 dark:text-teal-300' : 'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300')}`}>{user.role}</span></td> <td className="p-4 text-center space-x-2"> <button onClick={() => onEdit(user)} className="p-2 text-green-600 disabled:opacity-50" disabled={user.role === 'admin'}><Edit size={18} /></button> <button onClick={() => onDelete(user.id)} className="p-2 text-red-600 disabled:opacity-50" disabled={user.role === 'admin'}><Trash2 size={18} /></button> </td> </tr> ))}</tbody> </table> </div> </div> ); };
const UserFormModal = ({ user, students, teachers, users, onSave, onClose }) => { const isEditing = !!user?.id; const [formData, setFormData] = useState({ username: user?.username || '', password: '', role: user?.role || 'parent', linkedId: user?.studentId || user?.teacherId || '', }); const handleChange = (e) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); }; const handleSubmit = (e) => { e.preventDefault(); if (!formData.username || (isEditing ? false : !formData.password) || (!isEditing && !formData.linkedId && formData.role !== 'admin')) { return alert('Vui lòng điền đầy đủ thông tin. Mật khẩu là bắt buộc khi tạo mới.'); } if (!isEditing && users.some(u => u.username === formData.username)) { return alert('Tên đăng nhập đã tồn tại.'); } let finalData = { ...user, ...formData, password: formData.password || user?.password }; if (isEditing) { onSave('user', finalData); return; } let name = ''; if (formData.role === 'parent') { const student = students.find(s => s.id === parseInt(formData.linkedId)); name = `PH: ${student?.parentName || student?.name}`; finalData.studentId = parseInt(formData.linkedId); delete finalData.teacherId; } else if (formData.role === 'teacher') { const teacher = teachers.find(t => t.id === parseInt(formData.linkedId)); name = `${teacher.gender === 'Nữ' ? 'Cô' : 'Thầy'} ${teacher?.name}`; finalData.teacherId = parseInt(formData.linkedId); delete finalData.studentId; } else { name = 'Quản trị viên'; } finalData.name = name; onSave('user', finalData); }; return ( <FormModal title={isEditing ? 'Sửa Tài khoản' : 'Thêm Tài khoản mới'} onClose={onClose} onSubmit={handleSubmit}> <FormInput label="Tên đăng nhập" name="username" value={formData.username} onChange={handleChange} required /> <FormInput label="Mật khẩu" name="password" type="password" placeholder={isEditing ? "Để trống nếu không đổi" : ""} value={formData.password} onChange={handleChange} required={!isEditing} /> {!isEditing && ( <> <FormSelect label="Vai trò" name="role" value={formData.role} onChange={handleChange}> <option value="parent">Phụ huynh</option> <option value="teacher">Giáo viên</option> <option value="admin">Admin</option> </FormSelect> {formData.role !== 'admin' && (<FormSelect label={formData.role === 'parent' ? 'Liên kết với HS' : 'Liên kết với GV'} name="linkedId" value={formData.linkedId} onChange={handleChange} required> <option value="">-- Chọn --</option> {formData.role === 'parent' ? students.map(s => <option key={s.id} value={s.id}>{s.name}</option>) : teachers.map(t => <option key={t.id} value={t.id}>{t.name}</option>)} </FormSelect>)} </> )} </FormModal> ); };

// === Parent Components ===
const SidebarParent = ({ currentView, setCurrentView }) => { const navItems = [ { id: 'grades', label: 'Kết quả học tập', icon: BookUser }, { id: 'fees', label: 'Thông tin Học phí', icon: Banknote }, ]; return ( <nav className="w-20 lg:w-64 bg-white dark:bg-gray-800 shadow-lg"><div className="p-4 lg:p-6 border-b border-gray-200 dark:border-gray-700"><h1 className="text-xl lg:text-2xl font-bold text-green-600 text-center lg:text-left"><span className="lg:hidden">HS</span><span className="hidden lg:inline">Góc Phụ Huynh</span></h1></div><ul className="mt-6">{navItems.map(item => (<li key={item.id} className="px-2 lg:px-4 mb-2"><button onClick={() => setCurrentView(item.id)} className={`w-full flex items-center justify-center lg:justify-start p-3 rounded-lg ${currentView === item.id ? 'bg-green-500 text-white shadow-md' : 'text-gray-600 dark:text-gray-300 hover:bg-green-50 dark:hover:bg-gray-700'}`}><item.icon className="h-6 w-6 lg:mr-4" /> <span className="hidden lg:inline font-medium">{item.label}</span></button></li>))}</ul></nav> ); };
const HeaderParent = ({ currentUser, studentName, onLogout }) => ( <header className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm mb-6 flex justify-between items-center"><div><h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100">Học sinh: {studentName}</h2><p className="text-gray-500 dark:text-gray-400">Chào mừng, {currentUser.name}</p></div><div className="flex items-center gap-3"><ThemeToggleButton /><button onClick={onLogout} title="Đăng xuất" className="p-2 text-gray-500 dark:text-gray-400 hover:bg-red-100 hover:text-red-600 dark:hover:bg-red-900/50 rounded-full"><LogOut size={22} /></button></div></header>);
const StudentGradeView = ({ grades, subjects }) => {
    const getAssessmentIcon = (assessment) => {
        switch (assessment) {
            case 'Hoàn thành tốt': return <Smile className="text-green-500 inline-block mr-1" size={16} />;
            case 'Hoàn thành': return <Meh className="text-blue-500 inline-block mr-1" size={16} />;
            case 'Cần cố gắng': return <Frown className="text-red-500 inline-block mr-1" size={16} />;
            default: return null;
        }
    };
    return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"><h3 className="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">Bảng điểm năm học</h3><div className="overflow-x-auto"><table className="w-full text-left text-gray-800 dark:text-gray-300"><thead className="text-gray-700 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><th className="p-4 font-semibold">Môn học</th><th className="p-4 font-semibold">Điểm Giữa kỳ</th><th className="p-4 font-semibold">Điểm Cuối kỳ</th><th className="p-4 font-semibold">Đánh giá chung</th></tr></thead><tbody>{subjects.map(sub => { const grade = grades.find(g => g.subjectId === sub.id); return (<tr key={sub.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"><td className="p-4 font-medium">{sub.name}</td>{ sub.type === 'score' ? (<><td className="p-4 text-center">{grade?.midterm?.toFixed(1) || '-'}</td><td className="p-4 text-center">{grade?.final?.toFixed(1) || '-'}</td></>) : (<td colSpan="2" className="p-4 text-center text-gray-400 italic">Môn đánh giá bằng nhận xét</td>) }<td className="p-4 flex items-center">{getAssessmentIcon(grade?.assessment)}{grade?.assessment || '-'}</td></tr>);})}</tbody></table></div></div> ); 
};
const StudentFeeView = ({ fees, onPay }) => ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"><h3 className="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">Các khoản phí</h3><div className="overflow-x-auto"><table className="w-full text-left text-gray-800 dark:text-gray-300"><thead className="text-gray-700 dark:text-gray-200"><tr className="bg-gray-50 dark:bg-gray-700"><th className="p-4 font-semibold">Tên khoản thu</th><th className="p-4 font-semibold">Số tiền</th><th className="p-4 font-semibold">Hạn nộp</th><th className="p-4 font-semibold text-center">Trạng thái</th><th className="p-4 font-semibold text-center">Hành động</th></tr></thead><tbody>{fees.length > 0 ? fees.map(f => (<tr key={f.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"><td className="p-4">{f.feeName}</td><td className="p-4">{new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(f.amount)}</td><td className="p-4">{f.dueDate}</td><td className="p-4 text-center"><span className={`px-2 py-1 text-xs rounded-full ${f.status === 'Đã thanh toán' ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300'}`}>{f.status}</span></td><td className="p-4 text-center">{f.status === 'Chưa thanh toán' ? <button onClick={() => onPay(f)} className="py-1 px-4 bg-green-500 text-white text-sm rounded-md hover:bg-green-600">Thanh toán</button> : <ShieldCheck className="w-5 h-5 text-green-500 mx-auto" />}</td></tr>)) : <tr><td colSpan="5" className="text-center p-8 text-gray-500 dark:text-gray-400">Không có khoản phí nào.</td></tr>}</tbody></table></div></div> );
const PaymentModal = ({ fee, onClose, onConfirm }) => { const [paymentMethod, setPaymentMethod] = useState('bank'); return ( <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50"><div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-8 w-full max-w-md m-4"><div className="flex justify-between items-center mb-4"><h3 className="text-2xl font-bold text-gray-800 dark:text-gray-100">Thanh toán Học phí</h3><button onClick={onClose} className="p-2 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full"><X size={24} /></button></div><div className="space-y-4 text-gray-800 dark:text-gray-200"><p><span className="font-semibold">Khoản phí:</span> {fee.feeName}</p><p className="text-2xl font-bold text-red-600">{new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(fee.amount)}</p><div className="pt-4 border-t border-gray-200 dark:border-gray-600"><p className="font-semibold mb-2">Chọn phương thức:</p><div className="space-y-2"><label className="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700"><input type="radio" name="paymentMethod" value="bank" checked={paymentMethod === 'bank'} onChange={(e) => setPaymentMethod(e.target.value)} className="h-4 w-4 text-green-600 bg-gray-100 border-gray-300 focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" /><span className="ml-3 flex items-center gap-2"><Landmark size={20}/> Chuyển khoản</span></label><label className="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700"><input type="radio" name="paymentMethod" value="momo" checked={paymentMethod === 'momo'} onChange={(e) => setPaymentMethod(e.target.value)} className="h-4 w-4 text-green-600 bg-gray-100 border-gray-300 focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" /><span className="ml-3 flex items-center gap-2"><img src="https://upload.wikimedia.org/wikipedia/vi/f/fe/MoMo_Logo.png" alt="MoMo" className="w-5 h-5"/> Ví MoMo</span></label><label className="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700"><input type="radio" name="paymentMethod" value="card" checked={paymentMethod === 'card'} onChange={(e) => setPaymentMethod(e.target.value)} className="h-4 w-4 text-green-600 bg-gray-100 border-gray-300 focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" /><span className="ml-3 flex items-center gap-2"><CreditCard size={20}/> Thẻ tín dụng</span></label></div></div><div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onClose} className="py-2 px-4 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500">Hủy</button><button type="button" onClick={onConfirm} className="py-2 px-6 bg-green-500 text-white rounded-lg hover:bg-green-600 shadow">Xác nhận</button></div></div></div></div> ); };

// === Teacher Components ===
const SidebarTeacher = ({ currentUser, currentView, setCurrentView }) => { const navItems = [ { id: 'grades', label: 'Nhập điểm/Nhận xét', icon: BookUser }, { id: 'schedule', label: 'TKB Cá nhân', icon: Calendar }, ]; if(currentUser.isHomeroom) { navItems.unshift({ id: 'homeroom', label: 'Lớp Chủ nhiệm', icon: Home }); } if(currentUser.role === 'department_head') { navItems.push({ id: 'department', label: 'Tổ Chuyên môn', icon: Users2 }); } return ( <nav className="w-20 lg:w-64 bg-white dark:bg-gray-800 shadow-lg"><div className="p-4 lg:p-6 border-b border-gray-200 dark:border-gray-700"><h1 className="text-xl lg:text-2xl font-bold text-green-600 text-center lg:text-left"><span className="lg:hidden">GV</span><span className="hidden lg:inline">Góc Giáo Viên</span></h1></div><ul className="mt-6">{navItems.map(item => (<li key={item.id} className="px-2 lg:px-4 mb-2"><button onClick={() => setCurrentView(item.id)} className={`w-full flex items-center justify-center lg:justify-start p-3 rounded-lg ${currentView === item.id ? 'bg-green-500 text-white shadow-md' : 'text-gray-600 dark:text-gray-300 hover:bg-green-50 dark:hover:bg-gray-700'}`}><item.icon className="h-6 w-6 lg:mr-4" /> <span className="hidden lg:inline font-medium">{item.label}</span></button></li>))}</ul></nav> ); }
const ScheduleView = ({ schedule, title }) => { const days = ['Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7']; const periods = Array.from({ length: 10 }, (_, i) => i + 1); return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">{title}</h3> <div className="overflow-x-auto"> <table className="w-full border-collapse"> <thead className="text-gray-700 dark:text-gray-200"> <tr className="bg-gray-100 dark:bg-gray-700"> <th className="p-2 border border-gray-300 dark:border-gray-600">Tiết</th> {days.map(day => <th key={day} className="p-2 border border-gray-300 dark:border-gray-600">{day}</th>)} </tr> </thead> <tbody className="text-gray-800 dark:text-gray-300"> {periods.map(period => ( <tr key={period}> <td className="p-2 border border-gray-300 dark:border-gray-600 font-bold bg-gray-50 dark:bg-gray-700/50 text-center">{period}</td> {days.map(day => { const s = schedule.find(item => item.day === day && item.period === period); return ( <td key={day} className="p-2 border border-gray-300 dark:border-gray-600 text-center"> {s ? <div><p className="font-semibold">{s.subjectName}</p><p className="text-sm text-gray-500 dark:text-gray-400">{s.className}</p></div> : ''} </td> ) })} </tr> ))} </tbody> </table> </div> </div> ); };
const HomeroomView = ({ students, grades, subjects }) => { return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm"> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Tổng quan Lớp chủ nhiệm</h3> <StudentProfileView allStudents={students} classes={[]} onAdd={()=>{}} onEdit={()=>{}} onDelete={()=>{}} /> <div className="mt-6"> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200 mb-4">Bảng điểm tổng hợp của lớp</h3> <StudentGradeView grades={grades} subjects={subjects} /> </div> </div> ) };
const DepartmentScheduleView = ({ teachers, schedules }) => { const [selectedTeacherId, setSelectedTeacherId] = useState(teachers[0]?.id || null); const selectedSchedule = useMemo(() => schedules.filter(s => s.teacherId === selectedTeacherId), [schedules, selectedTeacherId]); const getTitle = (gender) => gender === 'Nữ' ? 'Cô' : 'Thầy'; return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm space-y-4"> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Thời khóa biểu Tổ chuyên môn</h3> <div className="flex items-center gap-4"> <label className="font-medium text-gray-800 dark:text-gray-200">Chọn giáo viên:</label> <FormSelect value={selectedTeacherId || ''} onChange={(e) => setSelectedTeacherId(Number(e.target.value))}> {teachers.map(t => <option key={t.id} value={t.id}>{`${getTitle(t.gender)} ${t.name}`}</option>)} </FormSelect> </div> {selectedTeacherId && <ScheduleView schedule={selectedSchedule} title={`TKB của ${teachers.find(t=>t.id === selectedTeacherId)?.name}`} />} </div> ) }
const MultiSelectDropdown = ({ label, options, selectedValues, onChange, displayKey = 'name', valueKey = 'id' }) => { const [isOpen, setIsOpen] = useState(false); const dropdownRef = useRef(null); const handleToggle = () => setIsOpen(!isOpen); const handleOptionClick = (value) => { const newSelectedValues = selectedValues.includes(value) ? selectedValues.filter(v => v !== value) : [...selectedValues, value]; onChange(newSelectedValues); }; useEffect(() => { const handleClickOutside = (event) => { if (dropdownRef.current && !dropdownRef.current.contains(event.target)) { setIsOpen(false); } }; document.addEventListener("mousedown", handleClickOutside); return () => document.removeEventListener("mousedown", handleClickOutside); }, [dropdownRef]); const getDisplayText = () => { if (selectedValues.length === 0) return `-- Chọn --`; if (selectedValues.length === 1) { if (label === "Tiết") return `Tiết ${selectedValues[0]}`; const selectedOption = options.find(opt => (typeof opt === 'object' ? opt[valueKey] : opt) === selectedValues[0]); return typeof selectedOption === 'object' ? selectedOption[displayKey] : selectedOption; } return `${selectedValues.length} mục đã chọn`; }; return ( <div className="relative" ref={dropdownRef}> <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{label}</label> <button type="button" onClick={handleToggle} className="w-full border border-gray-300 dark:border-gray-600 rounded-lg p-2 bg-white dark:bg-gray-700 text-left flex justify-between items-center text-gray-800 dark:text-gray-200" > <span className="truncate">{getDisplayText()}</span> <ChevronDown size={16} className={`transition-transform ${isOpen ? 'rotate-180' : ''}`} /> </button> {isOpen && ( <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto"> <ul className="text-gray-800 dark:text-gray-200"> {options.map(option => { const value = typeof option === 'object' ? option[valueKey] : option; const display = typeof option === 'object' ? option[displayKey] : option; return ( <li key={value} className="p-2 hover:bg-gray-100 dark:hover:bg-gray-600 cursor-pointer flex items-center" onClick={() => handleOptionClick(value)} > <input type="checkbox" checked={selectedValues.includes(value)} readOnly className="mr-2" /> <span>{display}</span> </li> ); })} </ul> </div> )} </div> ); };
const AssignmentView = ({ assignments, setAssignments, teachers, classes, subjects }) => { const [editing, setEditing] = useState(null); const [form, setForm] = useState({ teacherId: '', classId: '', subjectId: '', days: [], periods: [] }); const dayOptions = ['Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7']; const periodOptions = Array.from({ length: 10 }, (_, i) => i + 1); const handleEdit = (assignment) => { setEditing(assignment); setForm({ teacherId: assignment.teacherId, classId: assignment.classId, subjectId: assignment.subjectId, days: [assignment.day], periods: [assignment.period] }); }; const handleDelete = (id) => { setAssignments(assignments.filter(a => a.id !== id)); }; const handleChange = (e) => { const { name, value } = e.target; const isNumericField = ['teacherId', 'classId', 'subjectId'].includes(name); const processedValue = isNumericField && value ? parseInt(value, 10) : value; setForm({ ...form, [name]: processedValue }); }; const handleMultiSelectChange = (name, values) => { setForm({ ...form, [name]: values }); }; const handleSubmit = (e) => { e.preventDefault(); const { teacherId, classId, subjectId, days, periods } = form; if (!teacherId || !classId || !subjectId || days.length === 0 || periods.length === 0) { alert("Vui lòng điền đầy đủ thông tin, bao gồm ít nhất một ngày và một tiết."); return; } if (editing) { const day = days[0]; const period = periods[0]; const conflict = assignments.find(a => a.day === day && a.period === period && (a.teacherId === teacherId || a.classId === classId) && a.id !== editing.id ); if (conflict) { const conflictType = conflict.teacherId === teacherId ? 'giáo viên' : 'lớp học'; const teacherName = teachers.find(t => t.id === conflict.teacherId)?.name; const className = classes.find(c => c.id === conflict.classId)?.name; alert(`Lịch bị trùng! ${conflictType === 'giáo viên' ? `Giáo viên ${teacherName}` : `Lớp ${className}`} đã có lịch vào thời gian này.`); return; } setAssignments(assignments.map(a => a.id === editing.id ? { ...a, teacherId, classId, subjectId, day, period } : a )); } else { const newAssignments = []; let isConflict = false; let lastId = assignments.length > 0 ? Math.max(...assignments.map(a => a.id)) : 0; for (const day of days) { for (const period of periods) { const conflict = assignments.find(a => a.day === day && a.period === period && (a.teacherId === teacherId || a.classId === classId) ); if (conflict) { const conflictType = conflict.teacherId === teacherId ? 'giáo viên' : 'lớp học'; const teacherName = teachers.find(t => t.id === conflict.teacherId)?.name; const className = classes.find(c => c.id === conflict.classId)?.name; alert(`Lịch bị trùng! Không thể thêm phân công cho ${day} - Tiết ${period}. ${conflictType === 'giáo viên' ? `Giáo viên ${teacherName}` : `Lớp ${className}`} đã có lịch.`); isConflict = true; break; } newAssignments.push({ id: ++lastId, teacherId, classId, subjectId, day, period }); } if(isConflict) break; } if (!isConflict) { setAssignments([...assignments, ...newAssignments]); } } handleCancel(); }; const handleCancel = () => { setEditing(null); setForm({ teacherId: '', classId: '', subjectId: '', days: [], periods: [] }); }; const getTitle = (gender) => gender === 'Nữ' ? 'Cô' : 'Thầy'; return ( <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm space-y-6"> <h3 className="text-xl font-bold text-gray-700 dark:text-gray-200">Phân công Giảng dạy & Thời khóa biểu</h3> <div className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800/50 space-y-4"> <h4 className="font-semibold text-lg text-gray-800 dark:text-gray-200">{editing ? "Chỉnh sửa Phân công" : "Thêm Phân công mới"}</h4> <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 items-start"> <FormSelect label="Giáo viên" name="teacherId" value={form.teacherId || ''} onChange={handleChange} required> <option value="">-- Chọn GV --</option> {teachers.map(t => <option key={t.id} value={t.id}>{`${getTitle(t.gender)} ${t.name}`}</option>)} </FormSelect> <FormSelect label="Lớp" name="classId" value={form.classId || ''} onChange={handleChange} required> <option value="">-- Chọn lớp --</option> {classes.map(c => <option key={c.id} value={c.id}>{c.name}</option>)} </FormSelect> <FormSelect label="Môn học" name="subjectId" value={form.subjectId || ''} onChange={handleChange} required> <option value="">-- Chọn môn --</option> {subjects.map(s => <option key={s.id} value={s.id}>{s.name}</option>)} </FormSelect> <div className="lg:col-span-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 items-end"> <MultiSelectDropdown label="Ngày" options={dayOptions} selectedValues={form.days} onChange={(values) => handleMultiSelectChange('days', values)} /> <MultiSelectDropdown label="Tiết" options={periodOptions} selectedValues={form.periods} onChange={(values) => handleMultiSelectChange('periods', values.sort((a,b) => a-b))} /> <div className="flex gap-2 col-span-full md:col-span-2 self-end"> <button type="submit" className="w-full bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"> {editing ? "Cập nhật" : "Thêm phân công"} </button> {editing && ( <button type="button" onClick={handleCancel} className="w-full bg-gray-300 dark:bg-gray-600 text-black dark:text-white px-4 py-2 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-500"> Hủy </button> )} </div> </div> </form> </div> <div className="overflow-x-auto"> <table className="w-full text-left mt-4 text-gray-800 dark:text-gray-300"> <thead className="text-gray-700 dark:text-gray-200"> <tr className="bg-gray-50 dark:bg-gray-700"> <th className="p-4 font-semibold">Giáo viên</th> <th className="p-4 font-semibold">Lớp</th> <th className="p-4 font-semibold">Môn học</th> <th className="p-4 font-semibold">Ngày</th> <th className="p-4 font-semibold">Tiết</th> <th className="p-4 font-semibold text-center">Hành động</th> </tr> </thead> <tbody> {assignments.sort((a,b) => dayOptions.indexOf(a.day) - dayOptions.indexOf(b.day) || a.period - b.period).map(a => { const teacher = teachers.find(t => t.id === a.teacherId); const cls = classes.find(c => c.id === a.classId); const subject = subjects.find(s => s.id === a.subjectId); return ( <tr key={a.id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50"> <td className="p-4">{teacher ? `${getTitle(teacher.gender)} ${teacher.name}` : '---'}</td> <td className="p-4">{cls?.name || '---'}</td> <td className="p-4">{subject?.name || '---'}</td> <td className="p-4">{a.day}</td> <td className="p-4 text-center">{a.period}</td> <td className="p-4 text-center space-x-2"> <button onClick={() => handleEdit(a)} className="p-2 text-green-600"><Edit size={18} /></button> <button onClick={() => handleDelete(a.id)} className="p-2 text-red-600"><Trash2 size={18} /></button> </td> </tr> ); })} </tbody> </table> </div> </div> ); };
